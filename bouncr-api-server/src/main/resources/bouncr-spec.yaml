openapi: 3.0.0
info:
  version: 0.2.0
  title: Bouncr API Specification
  description: |
    Bouncr is a reverse proxy with authenticate and authorization.
  license:
    name: EPL 2.0
servers:
- url: http://localhost:3000/bouncr/api
paths:
  /sign_in:
    description: |-
      Sign in by an account and an password.
    post:
      tags:
        - Sign In
      summary: Sign in
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordSignInRequest'
      responses:
        201:
          description: Sign in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSession'
  /users:
    description: |-
      Find users and create a user.
    parameters:
    - $ref: '#/components/parameters/BouncrCredential'
    get:
      tags:
        - User
        - Administration
      summary: Fetch users
      parameters:
      - in: query
        name: limit
        schema:
          type: integer
      - in: query
        name: offset
        schema:
          type: integer
      responses:
        200:
          description: Fetch successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
    post:
      summary: Create a user
      operationId: craeteUser
      tags:
        - User
        - Administration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        201:
          description: Create successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/{account}:
    parameters:
    - $ref: '#/components/parameters/BouncrCredential'
    - name: account
      in: path
      required: true
      schema:
        type: string
      example: user1
    get:
      summary: Fetch a user by a given account
      operationId: fetchUser
      tags:
        - User
        - Administration
      responses:
        200:
          description: ???
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update a user
      operationId: updateUser
      tags:
        - User
        - Administration
      responses:
        204:
          description: Updated a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdateRequest'
        400:
          description: invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstraintsProblem'
    delete:
      summary: Delete a user
      operationId: deleteUser
      tags:
        - User
        - Administration
      responses:
        204:
          description: Delete a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /groups:
    parameters:
    - $ref: '#/components/parameters/BouncrCredential'
    get:
      summary: Find groups
      operationId: listGroups
      tags:
        - Group
        - Administration
      responses:
        200:
          description: ???
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Groups'
    post:
      summary: Create a group
      operationId: createGroup
      tags:
        - Group
        - Administration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreateRequest'
      responses:
        201:
          description: Created successful.
  /group/{name}:
    parameters:
    - $ref: '#/components/parameters/BouncrCredential'
    - name: name
      in: path
      description: The name of the group
      required: true
      schema:
        type: string
      example: group1
    get:
      summary: Find a group
      operationId: findGroup
      tags:
        - Group
        - Administration
      responses:
        200:
          description: Find a group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        404:
          description: The name of the group is not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem'
    put:
      summary: Update a group
      operationId: updateGroup
      tags:
        - Group
        - Administration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUpdateRequest'
      responses:
        204:
          description: Updating a group is successful
    delete:
      summary: Delete a group
      operationId: deleteGroup
      tags:
        - Group
        - Administration
      responses:
        204:
          description: Deleting a group is successful
  /applications:
    parameters:
    - $ref: '#/components/parameters/BouncrCredential'
    get:
      summary: Find groups
      operationId: findApplications
      tags:
        - Application
        - Administration
      responses:
        200:
          description: Finding groups is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Applications'
    post:
      summary: Create an application
      operationId: createApplication
      tags:
        - Application
        - Administration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationCreateRequest'
      responses:
        201:
          description: Creating an application is successful
        400:
          description: The request for creating an application is malformed
          content:
            application/json:
              schema:
                $ref:
                  '#/components/schemas/ConstraintsProblem'
  /application/{name}:
    parameters:
    - $ref: '#/components/parameters/BouncrCredential'
    - name: name
      required: true
      in: path
      schema:
        type: string
    get:
      summary: Find an application
      operationId: findApplication
      tags:
        - Application
        - Administration
      responses:
        200:
          description: Finding an appllication is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        404:
          description: Application is not found by the given name
    put:
      summary: Update an Application
      operationId: updateApplication
      tags:
        - Application
        - Administration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationUpdateRequest'
        required: true
      responses:
        204:
          description: Updating the application is successful
    delete:
      summary: Delete an application
      operationId: deleteApplication
      tags:
        - Application
        - Administration
      responses:
        204:
          description: Deleting the application is successful
  /application/{name}/realms:
    parameters:
    - $ref: '#/components/parameters/BouncrCredential'
    - name: name
      required: true
      in: path
      schema:
        type: string
    get:
      summary: Find realms
      operationId: findRealms
      tags:
        - Realm
        - Administration
      responses:
        200:
          description: Find realms is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Realms'
    post:
      summary: Create a realm
      operationId: createRealm
      tags:
        - Realm
        - Administration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RealmCreateRequest'
      responses:
        201:
          description: Creating a realm is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Realm'
  /application/{name}/realm/{realm_name}:
    parameters:
    - $ref: '#/components/parameters/BouncrCredential'
    - name: name
      required: true
      in: path
      schema:
        type: string
    - name: realm_name
      required: true
      in: path
      schema:
        type: string
    get:
      summary: Find an realm
      operationId: findRealm
      tags:
        - Realm
        - Administration
      responses:
        200:
          description: Find an realm is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Realm'
        404:
          description: The realm is not found by the given name
    put:
      summary: Update a realm
      operationId: updateRealm
      tags:
        - Realm
        - Administration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RealmUpdateRequest'
      responses:
        204:
          description: Updating the realm is successful
    delete:
      summary: Delete an realm
      operationId: deleteRealm
      tags:
        - Realm
        - Administration
      responses:
        204:
          description: Deleting the realm is successful
  /roles:
    parameters:
    - $ref: '#/components/parameters/BouncrCredential'
    get:
      summary: Find roles
      operationId: findRoles
      tags:
        - Role
        - Administration
      responses:
        200:
          description: Finding roles is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roles'
    post:
      summary: Create a role
      operationId: createRole
      tags:
        - Role
        - Administration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleCreateRequest'
      responses:
        201:
          description: Role is created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
  /role/{name}:
    parameters:
    - $ref: '#/components/parameters/BouncrCredential'
    - name: name
      required: true
      in: path
      schema:
        type: string
    get:
      summary: Find a role
      operationId: findRole
      tags:
        - Role
        - Administration
      responses:
        200:
          description: Finding a role is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    put:
      summary: Update a role
      operationId: updateRole
      tags:
      - Role
      - Administration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleUpdateRequest'
      responses:
        204:
          description: Updating a role is successful
    delete:
      summary: Delete a role
      operationId: deleteRole
      tags:
      - Role
      - Administration
      responses:
        204:
          description: Deleting a role is successful
  /permissions:
    parameters:
    - $ref: '#/components/parameters/BouncrCredential'
    get:
      summary: Find permissions
      operationId: findPermissions
      tags:
        - Permission
        - Administration
      responses:
        200:
          description: Finding permissions is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permissions'
    post:
      summary: Create a permission
      operationId: createPermission
      tags:
        - Permission
        - Administration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionCreateRequest'
      responses:
        201:
          description: Creating a permission is successful
  /permission/{name}:
    parameters:
    - $ref: '#/components/parameters/BouncrCredential'
    - name: name
      required: true
      in: path
      schema:
        type: string
    get:
      summary: Find a permission
      operationId: findPermission
      tags:
        - Permission
        - Administration
      responses:
        200:
          description: Fetching a permission is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
    put:
      summary: Update a permission
      operationId: updatePermission
      tags:
        - Permission
        - Administration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionUpdateRequest'
      responses:
        204:
          description: Updating a permission is successful
    delete:
      summary: Delete a permission
      operationId: deletePermission
      tags:
        - Permission
        - Administration
      responses:
        204:
          description: Deleteing a permission is successful
  /assignments:
    parameters:
    - $ref: '#/components/parameters/BouncrCredential'
    post:
      summary: Assignments
      operationId: assignments
      tags:
        - Assignment
        - Administration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignmentsRequest'
      responses:
        201:
          description: Creating assignments is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignments'
    delete:
      summary: Unassignments
      operationId: unassignments
      tags:
        - Asignment
        - Administration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignmentsRequest'
      responses:
        204:
          description: Deleting assignments is successful
  /invitations:
    parameters:
    - $ref: '#/components/parameters/BouncrCredential'
    post:
      summary: Create a invitation
      operationId: createInvitation
      tags:
        - Invitation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationCreateRequest'
      responses:
        201:
          description: Creating a invitation is successful
  /oidc_applications:
    parameters:
    - $ref: '#/components/parameters/BouncrCredential'
    get:
      summary: Find OIDC applications
      operationId: findOidcApplications
      responses:
        200:
          description: Finding OIDC application is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OidcApplications'
  /sign_up:
    description: Sign up
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpCreateRequest'
      responses:
        201:
          description: Signing up is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpResponse'
  /user_profile_verification:
    description: Verify an item of user profiles
    delete:
      parameters:
        - name: code
          in: query
          schema:
            type: string
      responses:
        204:
          description: Verificaiton of the user profile value is successful
  /password_credential:
    post:
      parameters:
        - $ref: '#/components/parameters/BouncrCredential'
      summary: Create a password credential
      operationId: createPasswordCredential
      tags:
        - Password Credential
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordCredentialCreateRequest'
      responses:
        201:
          description: Creating a password credential is successful.
    put:
      summary: Update a password
      operationId: updatePasswordCredential
      tags:
        - Password Credential
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordCredentialCreateRequest'
      responses:
        204:
          description: Updating a password is successful
    delete:
      summary: Delete a password credential
      operationId: deletePasswordCredential
      tags:
        - Password Credential
      responses:
        204:
          description: Deleting a password credential is successful
  /password_credential/reset_code:
    post:
      summary: Create a code for reset password
      operationId: createPassowrdResetCode
      tags:
        - Password Reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetChallengeRequest'
      responses:
        201:
          description: Creating a code for reset password is successful

  /password_credential/reset:
    put:
      summary: Reset a password
      operationId: resetPassowrd
      tags:
        - Password Reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        204:
          description: Reset a password is successful
  /otp_key:
    description: |-
      Find and publish a OTP (One time password) key.
    parameters:
    - $ref: '#/components/parameters/BouncrCredential'
    put:
      summary: Update a OTP key
      operationId: updateOtpKey
      tags:
        - OTP Key
      responses:
        201:
          description: Updating a OTP key is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtpKey'
    delete:
      summary: Delete a OTP key
      operationId: deleteOtpKey
      tags:
        - OTP Key
      responses:
        204:
          description: Deleting a OTP key is successful
  /actions:
    parameters:
    - $ref: '#/components/parameters/BouncrCredential'
    get:
      summary: Find user action histories
      operationId: findActions
      tags:
        - Action History
      responses:
        200:
          description: Finding user action histories is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserActions'
  /sessions:
    parameters:
    - $ref: '#/components/parameters/BouncrCredential'
    get:
      summary: Find user sessions
      operationId: findUserSessions
      tags:
        - User Session
      responses:
        200:
          description: Finging user sessions is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSessions'
  /session/{token}:
    parameters:
    - $ref: '#/components/parameters/BouncrCredential'
    delete:
      summary: Delete a user session
      description: Deleting a user session means signing out.
      operationId: deleteUserSession
      tags:
        - User session
      responses:
        204:
          description: Deleting a user session is successful
components:
  schemas:
    PasswordSignInRequest:
      type: object
      x-json-spec: 'PasswordSignInRequest'
      properties:
        account:
          type: string
        password:
          type: string
      example:
        account: user1
        password: user1
    Users:
      type: array
      x-json-spec: 'Users'
      items:
        $ref: '#/components/schemas/User'
    User:
      type: object
      x-json-spec: 'User'
      properties:
        id:
          type: number
          format: int64
        account:
          type: string
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Group'
      additionalProperties: true
      example:
        id: 1
        account: user1
        name: Test User1
        email: user1@exapmle.com
        groups:
        - id: 1
          name: group1
          description: This is a group1
        - id: 2
          name: group2
          description: This is a group2
    Groups:
      type: array
      items:
        $ref: '#/components/schemas/Group'
    Group:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
    Roles:
      type: array
      items:
        $ref: '#/components/schemas/Role'
    Role:
      type: object
      properties:
        id:
          type: number
          format: int64
        name:
          type: string
        description:
          type: string
    Permissions:
      type: array
      items:
        $ref: '#/components/schemas/Permission'
    Permission:
      type: object
      properties:
        id:
          type: number
          format: int64
        name:
          type: string
        description:
          type: string
    Applications:
      type: array
      items:
        $ref: '#/components/schemas/Application'
    Application:
      type: object
      properties:
        id:
          type: number
          format: int64
        name:
          type: string
        description:
          type: string
        pass_to:
          type: string
        virtual_path:
          type: string
    Realms:
      type: array
      items:
        $ref: '#/components/schemas/Realm'
    Realm:
      type: object
      properties:
        id:
          type: number
          format: int64
        name:
          type: string
        description:
          type: string
        url:
          type: string
    Assignments:
      type: array
      items:
        $ref: '#/components/schemas/Assignment'
    Assignment:
      type: object
      properties:
        group:
          $ref: '#/components/schemas/Group'
        role:
          $ref: '#/components/schemas/Role'
        realm:
          $ref: '#/components/schemas/Realm'
    AssignmentsRequest:
      type: array
      items:
        type: object
        properties:
          group:
            type: object
            properties:
              id:
                type: integer
          role:
            type: object
            properties:
              id:
                type: integer
          realm:
            type: object
            properties:
              id:
                type: integer
    UserActions:
      type: array
      items:
        $ref: '#/components/schemas/UserAction'
    UserAction:
      type: object
      properties:
        id:
          type: integer
        action_type:
          type: string
        actor:
          type: string
        actor_ip:
          type: string
        options:
          type: string
        created_at:
          type: string
          format: 'date-time'
    UserSessions:
      type: array
      items:
        $ref: '#/components/schemas/UserSession'
    UserSession:
      type: object
      properties:
        id:
          type: integer
        token:
          type: string
        user_agent:
          type: string
        remote_address:
          type: string
        created_at:
          type: string
          format: 'date-time'
    OidcApplications:
      type: array
      items:
        $ref: '#/components/schemas/OidcApplication'
    OidcApplication:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        home_url:
          type: string
        callback_url:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            type: string
    OidcProviders:
      type: array
      items:
        $ref: '#/components/schemas/OidcProvider'
    OidcProvider:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        api_key:
          type: string
        api_secret:
          type: string
        scope:
          type: string
        response_type:
          type: string
        authorization_endpoint:
          type: string
        token_endpoint:
          type: string
    OtpKey:
      type: object
      properties:
        key:
          type: string
    UserCreateRequest:
      type: object
      properties:
        account:
          type: string
      additionalProperties: true
    UserUpdateRequest:
      type: object
      additionalProperties: true
    GroupCreateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    GroupUpdateRequest:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
    RoleCreateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    RoleUpdateRequest:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
    PermissionCreateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    PermissionUpdateRequest:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
    ApplicationCreateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        pass_to:
          type: string
        virtual_path:
          type: string
        top_page:
          type: string
    ApplicationUpdateRequest:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        pass_to:
          type: string
        virtual_path:
          type: string
        top_page:
          type: string
    RealmCreateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    RealmUpdateRequest:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
    OidcApplicationCreateRequest:
      type: object
      properties:
        name:
          type: string
        home_url:
          type: string
        callback_url:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            type: string
    OidcApplicationUpdateRequest:
      type: object
      properties:
        name:
          type: string
        home_url:
          type: string
        callback_url:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            type: string
    OidcProviderCreateRequest:
      type: object
      properties:
        name:
          type: string
        api_key:
          type: string
        api_secret:
          type: string
        scope:
          type: string
        response_type:
          type: string
        authorization_endpoint:
          type: string
        token_endpoint:
          type: string
    OidcProviderUpdateRequest:
      type: object
      properties:
        name:
          type: string
        api_key:
          type: string
        api_secret:
          type: string
        scope:
          type: string
        response_type:
          type: string
        authorization_endpoint:
          type: string
        token_endpoint:
          type: string
    InvitationCreateRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        groups:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
    SignUpCreateRequest:
      type: object
      properties:
        account:
          type: string
        code:
          type: string
      additionalProperties: true
    SignUpResponse:
      type: object
      properties:
        id:
          type: integer
        account:
          type: string
        password:
          type: string
          format: password
      additionalProperties: true
    PasswordCredentialCreateRequest:
      type: object
      properties:
        account:
          type: string
        password:
          type: string
          format: password
    PasswordCredentialUpdateRequest:
      type: object
      properties:
        account:
          type: string
        old_password:
          type: string
          format: password
        new_password:
          type: string
          format: password
    PasswordResetChallengeRequest:
      type: object
      properties:
        account:
          type: string
          description: An account for reset a password
    PasswordResetRequest:
      type: object
      properties:
        code:
          type: string
          description: An given code for reset a password
        password:
          type: string
          format: password
          required: false
    ConstraintsProblem:
      type: object
      properties:
        violations:
          type: array
          items:
            $ref: '#/components/schemas/ConstraintsViolation'
    ConstraintsViolation:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    Problem:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
  parameters:
    BouncrCredential:
      name: X-Bouncr-Credential
      description: Bouncr credential
      in: header
      schema:
        type: string
        x-json-spec: BouncrCredential


